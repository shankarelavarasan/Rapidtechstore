# Google Cloud Build configuration for Rapid Tech Store
steps:
  # Step 1: Install dependencies and run tests
  - name: 'node:18-alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd backend
        npm ci
        npm run test
        npm run lint
    id: 'test'

  # Step 2: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/rapid-tech-store-backend:$COMMIT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/rapid-tech-store-backend:latest'
      - '.'
    id: 'build'
    waitFor: ['test']

  # Step 3: Push Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/rapid-tech-store-backend:$COMMIT_SHA'
    id: 'push-sha'
    waitFor: ['build']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/rapid-tech-store-backend:latest'
    id: 'push-latest'
    waitFor: ['build']

  # Step 4: Run database migrations
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud sql connect rapid-tech-store-db --user=postgres --quiet << 'EOF'
        \q
        EOF
        
        # Run Prisma migrations
        docker run --rm \
          -e DATABASE_URL="$$DATABASE_URL" \
          gcr.io/$PROJECT_ID/rapid-tech-store-backend:$COMMIT_SHA \
          npx prisma migrate deploy
    id: 'migrate'
    waitFor: ['push-sha']
    secretEnv: ['DATABASE_URL']

  # Step 5: Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'rapid-tech-store-backend'
      - '--image=gcr.io/$PROJECT_ID/rapid-tech-store-backend:$COMMIT_SHA'
      - '--region=us-central1'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--port=3000'
      - '--memory=2Gi'
      - '--cpu=2'
      - '--max-instances=100'
      - '--min-instances=1'
      - '--concurrency=80'
      - '--timeout=300'
      - '--set-env-vars=NODE_ENV=production'
      - '--set-secrets=DATABASE_URL=database-url:latest,JWT_SECRET=jwt-secret:latest,OPENAI_API_KEY=openai-api-key:latest,GOOGLE_CLIENT_ID=google-client-id:latest,GOOGLE_CLIENT_SECRET=google-client-secret:latest,RAZORPAY_KEY_ID=razorpay-key-id:latest,RAZORPAY_KEY_SECRET=razorpay-key-secret:latest,PAYONEER_API_KEY=payoneer-api-key:latest,SENDGRID_API_KEY=sendgrid-api-key:latest'
    id: 'deploy'
    waitFor: ['migrate']

  # Step 6: Update traffic allocation
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'services'
      - 'update-traffic'
      - 'rapid-tech-store-backend'
      - '--to-latest'
      - '--region=us-central1'
    id: 'traffic'
    waitFor: ['deploy']

  # Step 7: Run health check
  - name: 'gcr.io/cloud-builders/curl'
    args:
      - '-f'
      - 'https://rapid-tech-store-backend-[PROJECT_ID].a.run.app/health'
    id: 'health-check'
    waitFor: ['traffic']

# Configure secrets
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/database-url/versions/latest
      env: 'DATABASE_URL'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitution_option: 'ALLOW_LOOSE'

# Build timeout
timeout: '1200s'

# Substitutions
substitutions:
  _SERVICE_NAME: 'rapid-tech-store-backend'
  _REGION: 'us-central1'

# Build triggers
# This will be triggered on:
# - Push to main branch
# - Pull request to main branch
# - Manual trigger